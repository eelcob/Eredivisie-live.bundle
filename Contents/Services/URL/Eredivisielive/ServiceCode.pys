####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			video_codec = VideoCodec.H263,
			audio_codec = AudioCodec.MP3,
			container = 'flv',
			video_resolution = 'sd',
			optimized_for_streaming = True,
			audio_channels = 2,
			parts = [PartObject(key=Callback(PlayVideo, url = url))]
		)
	]

####################################################################################################
def NormalizeURL(url):

	return url
	
####################################################################################################
def PlayVideo(url):

	content = HTML.ElementFromURL(url)
	video_url = content.xpath('//div[@id="content"]/div/section/div/div/input[@id="video-smil"]')[0].get('value')
	return Redirect(video_url)

####################################################################################################
def MetadataObjectForURL(url):

	#perhaps to get in there
	#plex_date = Datetime.ParseDate(string_date)

	content = HTML.ElementFromURL(url)

	title = content.xpath('//div[@id="content"]/div/section/header/h1')[0].text

	try:
		thumb = content.xpath('//meta[@property="og:image"]')[0].get('content')
	except:
		thumb = R('icon-default.png')
	
	try:
		summary = content.xpath('//meta[@property="og:description"]')[0].get('content')
	except:
		summary = ""
		
	return VideoClipObject(
		title = title,
		summary = summary,
		thumb = thumb
	)
